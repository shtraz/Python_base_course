from random import randint

"""
Урок 3. Списки и словари
Задача 16: Требуется вычислить, сколько раз встречается некоторое число X в массиве A[1..N]. 
Пользователь в первой строке вводит натуральное число N – количество элементов в массиве. 
В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X

*Пример:*

5
    1 2 3 4 5
    3
    -> 1
"""

my_list = [randint(0, 100) for i in range(0, int(input("Введите количество "
                                                       "элементов списка: ")))]
print(my_list)

find_number = int(input("Введите искомое число Х: "))
number_X = 0
term = ''

for el in my_list:
    if el == find_number:
        number_X += 1

count_number = str(number_X)[-1:-3:-1]
if int(count_number) > 11 and int(count_number) < 15:
    term = 'раз'
else:
    count_number = str(number_X)[-1]
    if int(count_number) > -1 and int(count_number) < 2:
        term = 'раз'
    if int(count_number) > 1 and int(count_number) < 5:
        term = 'раза'

print(f'Искомое число {find_number} встречается {number_X} {term}')

"""
Задача 18: Требуется найти в массиве A[1..N] самый близкий по величине элемент к заданному числу X. 
Пользователь в первой строке вводит натуральное число N – количество элементов в массиве. 
В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X

*Пример:*

5
    1 2 3 4 5
    6
    -> 5
"""

# Запрашиваю количество уникальных значений элементов списка
my_list = []
count_numbers = int(input("Введите количество элементов списка: "))
flag = 0

# Генеррирую список уникальных значений с N количеством элементов
while flag < count_numbers:
    number = randint(0, 100)
    if number not in my_list:
        my_list.append(number)
    flag += 1

print(my_list)

# Запрашиваю искомое число
find_number = int(input("Введите искомое число Х: "))

# Поиск самого близкого по величине элемента списка к искомому числу
max_near_number = my_list[0]  # Пусть 1-й элемент спска будет задан как
# ближайший по величине элемент

for el in my_list:
    if (el - find_number) ** 2 <= (max_near_number - find_number) ** 2:  #
        # Находим Наименьшую разность между искомым числом и элементами списка
        max_near_number = el  # Если разность текущего элемента списка и
        # искомиого числа <= чем разность определенного как ближайшее число
        # и искомого числа, то определям ближайшее текущее число к искомому
        # равным текущему элементу списка (все по модулю)

print(f'Самый близкий по велечине элемент к искомому числу {find_number}: '
      f' {max_near_number}')

"""
*Задача 20: * В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность. 
В случае с английским алфавитом очки распределяются так:
A, E, I, O, U, L, N, S, T, R – 1 очко; 
D, G – 2 очка; 
B, C, M, P – 3 очка; 
F, H, V, W, Y – 4 очка; 
K – 5 очков; 
J, X – 8 очков; 
Q, Z – 10 очков. 

А русские буквы оцениваются так: 
А, В, Е, И, Н, О, Р, С, Т – 1 очко; 
Д, К, Л, М, П, У – 2 очка; 
Б, Г, Ё, Ь, Я – 3 очка; 
Й, Ы – 4 очка; 
Ж, З, Х, Ц, Ч – 5 очков; 
Ш, Э, Ю – 8 очков; 
Ф, Щ, Ъ – 10 очков. 

Напишите программу, которая вычисляет стоимость введенного пользователем слова. 
Будем считать, что на вход подается только одно слово, которое содержит либо только английские, либо только русские буквы.

*Пример:*

ноутбук
    12
"""

word = input("Введите слово для подсчета очков: ")

dict_EN = {
    1: ('A', 'E', 'I', 'O', 'U', 'L', 'N', 'S', 'T', 'R'),
    2: ('D', 'G'),
    3: ('B', 'C', 'M', 'P'),
    4: ('F', 'H', 'V', 'W', 'Y'),
    5: ('K'),
    8: ('J', 'X'),
    10: ('Q', 'Z')
}

dict_RU = {
    1: ('А', 'В', 'Е', 'И', 'Н', 'О', 'Р', 'С', 'Т'),
    2: ('Д', 'К', 'Л', 'М', 'П', 'У'),
    3: ('Б', 'Г', 'Ё', 'Ь', 'Я'),
    4: ('Й', 'Ы'),
    5: ('Ж', 'З', 'Х', 'Ц', 'Ч'),
    8: ('Ш', 'Э', 'Ю'),
    10: ('Ф', 'Щ', 'Ъ')
}


def score(word):
    summ = 0
    for i in word:
        for key, value in dict_EN.items():
            if i.upper() in value:
                summ += key
        for key, value in dict_RU.items():
            if i.upper() in value:
                summ += key
    return summ


print(f'Слово {word} оценивается в {score(word)} баллов!')
