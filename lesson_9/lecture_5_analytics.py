# Аналитика

"""
Нужно в поисковую строку в браузере вбить Google Colab и выбрать свой ящик на гугл.
Преподаватель говорит, что файл есть уже в системе и вам лишь нужно его подключить
Когда выполните задание нужно нажать на кнопку «Share» в правом верхнем углу (поделиться)
И указать доступ (любой у кого есть ссылка)
Отправить ссылку преподавателю на проверку..
Я понял так
"""

# Если работаете локально не забудьте:
# pip install pandas pip install seaborn pip install matplotlib
#
# Так же, если вы работаете в pyCharm чтобы вывести на экран всю эту красоту, нужно импортировать себе:
# import matplotlib.pyplot as plt # ну либо просто import matplotlib
#
# и после комманд построения графиков типа sns.scatter.... или sns.line.... выводить на экран с помощью
# plt.show() # либо matplotlib.pyplot.show() если импортировали matplotlib

# https://habr.com/ru/company/otus/blog/540526/
# https://habr.com/ru/company/skillfactory/blog/664756/
# https://stackoverflow.com/questions/64450497/scatterplot-do-not-show-any-graphs


import pandas as pd
import matplotlib.pyplot as plt

# Настроим отображение всех столбцов
pd.set_option('display.max_columns', None)

# Читаем
df = pd.read_csv('california_housing_train.csv', sep=',')

# Выводим таблицу (первые 10 элементов)
print(df.head(n=10))

# Выводим таблицу (последние 10 элементов)
# print(df.tail())
print(df.tail(n=2))

# Сколько строк и сколько столбцов в таблице
print(df.shape)

# Показать пустые строки
print(df.isnull())

# Получить сумму пустых ячеек. Все ячейки в файле заполнены
print(df.isnull().sum())

# Посмотреть тип данных столбцов
print(df.dtypes)

# Получить список всех столбцов
print(df.columns)

# Вывести определенный столбец
print(df[['latitude', 'population']])

# Вывести столбец total_rooms, у которого медианный возраст здания (
# housing_median_age) меньше 20

# Сначала выведем строки, где housing_median_age < 20
print(df[df['housing_median_age'] < 20])

# Теперь выведем столбец total_rooms
print(df[df['housing_median_age'] < 20]['total_rooms'])

# Новое условие, housing_median_age > 10 and < 20
print(df[(df['housing_median_age'] < 20) & (df['housing_median_age'] > 10)][
          'total_rooms'])

# Если хотим выводить несколько столбцов
print(df[(df['housing_median_age'] < 20) & (df['housing_median_age'] > 10)][[
    'total_rooms', 'housing_median_age']])

# Простая статистика
# Вывести максимальное значение по какому-то столбцу
print(df['population'].max())

# Вывести минимальное значение по какому-то столбцу
print(df['population'].min())

# Вывести AVG значение по какому-то столбцу
print(df['population'].mean())

# Вывести SUM значений по какому-то столбцу
print(df['population'].sum())

# Вывести Median значений по какому-то столбцу
print(df[['population', 'total_rooms']].median())

# Получить всю информацию сразу
print(df.describe())

# Scatterplot (Точечный график). Математическая диаграмма, изображающая
# значение 2х переменных в ввиде точека на декартовой плоскости. Библиотека
# seaborn без труда принимает DataFrame (таблицу). Что бы изобразить
# отношения между двумя столбцами достаточно указать, какой столбец
# отобразить по оси х, а какой по оси у.

import seaborn as sns

# Изображение точек долготы по отношению к широте:
# sns.scatterplot(data=df, x='longitude', y='latitude')
# plt.show()

# Отношение, чем выше количество семей, тем выше количество людей и комнат
# sns.scatterplot(data=df, x='households', y='population', hue='total_rooms')
# plt.show()

# Изменим размер точек на графике
# sns.scatterplot(data=df, x='households', y='population', hue='total_rooms',
# size=10)
# plt.show()

# Визуализация данных. Можем визуализировать сразу несколько отношений,
# используя класс PairGrid внутри seaborn. PairGrid принимает как аргумент
# pandas DataFrame и визуализирует все возможные отношения между ними,
# в соответствии с выбранным типом графика

# Создадим список с нужными нам столбцами
cols = ['population', 'median_income', 'housing_median_age',
        'median_house_value']
# В переменную g запишем результат работы функции PairGrid с переданным в
# параметрах списком столбцов
# g = sns.PairGrid(df[cols])
# С помощью map покажем результат
# g.map(sns.scatterplot)
# plt.show()

# Линейные графики
# Хорошо подойдут, если есть временная или какая-либо иная
# последовательность и значения, которые могут меняться в зависимости от
# нее. Для генерации линейных графиков в seaborn используется replit
# функция. Она также принимает DataFrame, x, y - столбцы.

# Отношение широты к средней стоимости дома
# sns.relplot(x='latitude', y='median_house_value', kind='line', data=df)

# Отношение долготы к средней стоимости дома
# sns.relplot(x='longitude', y='median_house_value', kind='line', data=df)
# plt.show()

# Можно видеть, что в определенных местах широты цена за дома очень высока.
# Используя точечный график можно визуализировать эти отношения с большей
# четкостью. Скорее всего резкий рост цен связан с близостью к ценному
# объекту, повышающему качество жизни, скорее всего побережье океана или реки.

# Визуализируем широту к долготе что бы понять где находятся дома,
# почем такие сачки в средней цене за дом
# sns.scatterplot(data=df, x='latitude', y='longitude', hue='median_house_value')

# Гистограмма
# Способ представления табличных данных в графическом виде - в виде
# столбчатой диаграммы. По оси Х обычно указывают значения, а по оси У -
# встречаемость (количество таких значений в выборке)

# Построим гистограмму по среднему доходу
# sns.histplot(data=df, x='median_income')
# Видим что у большинства семей доход находится между 2 и 6. И только очень
# небольшое количество людей обладают доходом > 10

# Отобразим гистограмму по среднему возрасту жилья
# sns.histplot(data=df, x='housing_median_age')
# Распределение по возрасту более равномерное. Большую часть жителей
# составляют люди в возрасте от 20 до 40 лет. Но и молодежи не мало. Также
# очень мноо пожилых людей > 50 лет медианный возраст.

# Посмотрим медианный доход у пожилых людей
# sns.histplot(data=df[df['housing_median_age'] > 50], x='median_income')
# Большого отличия от популяции в целом не наблюдается. Скорее всего это
# местные жители.

print(df.loc[df['housing_median_age'] <= 20, 'housing_median_age'])

# Проверим существует ли столбец age_group?
print(df.columns)

# Разобьем возрастные группы на 3 категории те кто моложе 20 лет, от 20 до
# 50 лет и от 50 лет, что бы посмотреть влияет ли это на доход.
df.loc[df['housing_median_age'] <= 20, 'age_group'] = "Молодые"
df.loc[(df['housing_median_age'] > 20) & (df['housing_median_age'] <= 50),
'age_group'] = "Ср. возраст"
df.loc[df['housing_median_age'] > 50, 'age_group'] = "Пожилые"
print(df.columns)

# Выведим таблицу и посмотрим колонку age_group
print(df.head())

# Сгруппируем по age_group. Возьмем среднее значение от median_income и сразу
# построим график
# df.groupby('age_group')['median_income'].mean().plot(kind='bar')
# Молодые оказываются самой богатой группой населения. Но отличие в доходе
# не значительное.

# Seaborn так же позволяет нас смотреть распределение по многим параметрам.
# Давайте поделим группы по доходам на 2. Те у кого медианный доход выше 6 и
# те у кого меньше. Изобразим дополнительное измерение с помощью  оттенка в
# виде возрастных групп и групп по доходам
# Сформируем для начала эти группы с помощью функции loc
df.loc[df['median_income'] > 6, 'income_group'] = 'rich'
df.loc[df['median_income'] < 6, 'income_group'] = 'everyone_else'
# Проверим создались ли новые группы(столбцы)
print(df.columns)
# Выведим таблицу и посмотрим колонку income_group
print(df.head())
# Теперь построим гистограмму. Указываем наш DataFrame, X = медианная цена
# дома, и возьмем оттенок по нашим группам income_group
sns.histplot(data=df, x='median_house_value', hue='income_group')
# Из графика видим что богатые люди находятся там, где больше значение
# медианной стоимости жилья
plt.show()

# Выводы:
# 1. Стоимость домов напрямую зависит от их расположения.
# 2. В определенной полосе (скорее всего побережье) цена домов высокая.
# 3. Чем выше доход, тем больше шанс, что человек проживает в богатом районе
# 4. Распределение по возрастам примерно одинаковое во всех группах доходов.
# 5. Очевидно, что чем больше людей, тем больше семей, и соответственно
# комнат и спален.
