"""
Задание 1.

Спортсмен занимается ежедневными пробежками.
В первый день его результат составил a километров.
Каждый день спортсмен увеличивал результат на 10 % относительно предыдущего.
Требуется определить номер дня,
на который результат спортсмена составит не менее b километров.
Программа должна принимать значения параметров a и b
и выводить одно натуральное число — номер дня.

Например: a = 2, b = 3.
Результат:
1-й день: 2
2-й день: 2,2
3-й день: 2,42
4-й день: 2,66
5-й день: 2,93
6-й день: 3,22
Ответ: на 6-й день спортсмен достиг результата — не менее 3 км.
"""

progress_distance = int(input("Укажите, сколько киллометров вы можете "
                           "пробежать за 1 день сейчас: "))
finish_distance = int(input("Укажите, сколько вы хотите пробегать "
                            "киллометров за 1 день: "))
percent_progress = int(input("Укажите, на сколько % вы планируете "
                             "прогрессировать каждый день: "))
trenning_progress = percent_progress / 100 + 1
day_counter = 1

while progress_distance <= finish_distance:
    progress_distance *= trenning_progress
    day_counter += 1

print(f'На {day_counter}-й день вы достигнете результата - не '
      f'менее {int(progress_distance)} км/день!')

"""
Задание 2.

Пользователь вводит целое положительное число.
Найдите самую большую цифру в числе.
Для решения используйте цикл while и только арифметические операции.
Не используйте взятие по индексу.

Пример:
Ведите целое положительное число: 123456789
Самая большая цифра в числе: 9
"""

number = input("\nВведите целое положительное число: ")
i = 0
max_number = number[0]

while i < len(number):
    if max_number >  number[i]:
        max_number = max_number
    else:
        max_number = number[i]
    i += 1

print(f'{max_number}\n')

"""
Задание 3. Создать список и заполнить его элементами различных типов данных.
Реализовать проверку типа данных каждого элемента.
Использовать функцию type() для проверки типа.
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

Пример:
для списка [5, "string", 0.15, True, None]
результат

<class 'int'>
<class 'str'>
<class 'float'>
<class 'bool'>
<class 'NoneType'>
"""

my_list = [1, 1.5, 'hello', True, None]

for el in my_list:
    print(f'Элемент списка: {el} - Тип данных: {type(el)}')

"""
Задание 4. Для списка реализовать обмен значений соседних элементов,
т.е. значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
При нечетном количестве элементов последний сохранить на своем месте.
Для заполнения списка элементов необходимо использовать функцию input().

Пример:
Введите целые числа через пробел: 1 2 3 4
Результат: 2 1 4 3

Введите целые числа через пробел: 1 2 3
Результат: 2 1 3
"""

numbers = input("\nВведите целые числа через пробел: ").split(' ')
i = 0

print(f'Список 1: {numbers}')

if len(numbers) % 2 == 0:
    while i < len(numbers):
        numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]
        i += 2
else:
    while i < len(numbers) -1:
        numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]
        i += 2
print(f'Список 2: {numbers}')

"""
Задание 5. Пользователь вводит строку из нескольких слов,
разделённых пробелами. Вывести каждое слово с новой строки.
Строки необходимо пронумеровать. Если слово длинное,
выводить только первые 10 букв в слове.

Пример:
Введите слова через пробел: раз два три
1. раз
2. два
3. три

Введите слова через пробел: раз перерефрижерированность
1. раз
2. перерефриж
"""

my_words = input("\nВведите слова через пробел: ").split(' ')

for i in range(len(my_words)):
    print(f'{i + 1}. {my_words[i][:10]}')
